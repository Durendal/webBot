<?php
/**
 *      Cookies.php - An object to represent cookies with webBot
 *
 *      This class helps dissecting the responses from HTTP requests
 *      facilitates easy access to: Status code, headers, and content
 *
 * @author Durendal
 * @license GPL
 * @link https://github.com/Durendal/webBot
 */
namespace WebBot\WebBot;

use WebBot\WebBot\Exceptions\CookiesException;

class Cookies implements Countable
{
    /**
     * @var array $cookies - An array containing a list of currently set cookies
     * @var string $cookieJar - A string containing the location of the cookie file
     */
    private $cookies;
    private $cookieJar;

    /**
     *   __construct(&$ch, $cookies = array(), $cookieJar = "cookies.txt")
     *
     *     Constructs a fresh Cookies object and sets any cookies passed to it.
     *
     * @param cURL $ch - cURL handle of the parent request
     * @param array $cookies - An array of custom cookies to set.
     * @param string $cookieJar - The location of the file to write/read cookies from
     *
     * @return void
     */
    public function __construct(string $cookieJar = null)
    {
        $this->cookies = array();
        if ($cookieJar) {
            $this->setCookieJar($cookieJar);
            $this->parseCookieFile();
        }
    }

    public function count()
    {
        return count($this->cookies);
    }

    private function parseCookieFile()
    {
        //$raw = file_get_contents($this->cookieJar);
        $raw = file($this->cookieJar);
        if (count($raw) > 0) {
            // Extract cookies, ignore initial 3 comments in cookie file generated by cURL
            $data = array_slice($raw, 4, -1);
            foreach ($entries as $i => $entry) {
                $entries[$i] = explode("\t", $entries[$i]);
            }

            foreach ($entries as $entry) {
                try {
                    if ($entry[0] == "") {
                        continue;
                    }
                    $this->setCookie(
                        $entry[0],
                        array(
                            'flag' => $entry[1],
                            'path' => $entry[2],
                            'secure' => $entry[3],
                            'expiration' => $entry[4],
                            'name' => $entry[5],
                            'value' => $entry[6]
                        )
                    );
                } catch (CookiesException $error) {
                }
            }
        }
    }

    /**
     *  __toString()
     *
     *      Returns a printable string representation of the Cookies object.
     *
     * @return string
     */
    public function __toString()
    {
        return sprintf(
            "<HTTP Cookies - %d cookies currently set>",
            count($this->cookies)
        );
    }

    /**
     *  setCookieJar($cookieJar)
     *
     *      Sets the location of the file to use for reading/writing cookies.
     *
     * @param string $cookieJar - The path to the file to store cookies in
     *
     * @return void
     */
    public function setCookieJar(string $cookieJar)
    {
        if (!file_exists($cookieJar)) {
            file_put_contents($cookieJar, "");
        }
        $this->cookieJar = $cookieJar;
    }

    /**
     *  getCookieJar()
     *
     *      Returns the location of the file to use for reading/writing cookies.
     *
     * @return string $this->cookieJar - The path of the file to read/write cookies from
     */
    public function getCookieJar()
    {
        return $this->cookieJar;
    }

    public function usingCookieJar()
    {
        return $this->getCookieJar() ? true : false;
    }

    public function setCookie(string $key, Cookie $value)
    {
        $this->cookies[$key] = $value;
    }

    public function getCookies()
    {
        return $this->cookies;
    }
}
